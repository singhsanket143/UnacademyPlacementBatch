// O(n^5)
void fun(int n) {
	for(int i=0;i<n;i++) {
		for(int j=i;j<i*i;j++) {
			if(j%i==0) {
				for(int k=0;k<j;k++) {
					cout<<"hey";
				}
			}
		}
	}
}

-------------------
O(n^2logn)
void fun(int n) {
	int i, j, k, count=0;
	for(i=n/2;i<=n;i++)
		for(j=1;j+n/2<=n;j=j+1)
			for(k=1;k<=n;k=k*2)
				count--;

}

----------------------------
void fun(int n) {
	if(n==1)
		return;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++){
			cout<<"Everyone knows ";
			break;
			cout<<"Rocks!! ";
			cout<<endl;
		}
}

--------------------------------
// T(n) = T(n-3) + O(n^2) -> O(n^3)
void fun(int n) {
	if(n == 1) return ;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j<= n;j++) {
			cout<<"hello";
		}
	}	
	fun(n-3);
}

--------------------------------
// Best case complexity ? Î©(1)
// worst Case complexity? O(sqrt(n)) -> n is prime
int fun(int n) {
	for(int i = 2; i <= sqrt(n); i++) {
		if(n % i == 0) return 0;
	}
	return 1;
}

-------------------------------
// worst case ? O((logn)^2)
void fun(int n) {
	int i = 1;
	while(i < n) { // 1 -> 2 -> 4 -> 8 -> ....2^K (2^k < n) k -> logn
		int j = n; // n -> n/2 -> n/4 ...... 1
		while(j > 0) {
			j /= 2;
		}
		i *= 2;
	}
}































































































